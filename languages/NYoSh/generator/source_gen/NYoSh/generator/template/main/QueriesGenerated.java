package NYoSh.generator.template.main;

/*Generated by MPS */

import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.generator.template.PropertyMacroContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.generator.template.ReferenceMacroContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodeContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodesContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;

public class QueriesGenerated {
  public static Object propertyMacro_GetPropertyValue_8483436209635881989(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "name");
  }

  public static Object propertyMacro_GetPropertyValue_7872582389600940400(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "alias");
  }

  public static Object referenceMacro_GetReferent_7872582389599771491(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return (SNodeOperations.isInstanceOf(_context.getNode(), "NYoSh.structure.GStringCommand") ?
      "appendCommand" :
      "appendOperator"
    );
  }

  public static SNode sourceNodeQuery_5153453187032310351(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "statements", true);
  }

  public static SNode sourceNodeQuery_7872582389600940237(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "command", true);
  }

  public static Iterable sourceNodesQuery_7872582389599671076(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "commands", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "NYoSh.structure.GStringCommand") || SNodeOperations.isInstanceOf(it, "NYoSh.structure.BinaryCommandOperator");
      }
    });
  }
}
