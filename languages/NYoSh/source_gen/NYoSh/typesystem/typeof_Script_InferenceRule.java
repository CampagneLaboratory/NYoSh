package NYoSh.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.baseLanguage.behavior.Classifier_Behavior;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.errors.BaseQuickFixProvider;
import jetbrains.mps.smodel.SModelUtil_new;

public class typeof_Script_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_Script_InferenceRule() {
  }

  public void applyRule(final SNode script, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    for (SNode entryPoint : ListSequence.fromList(SLinkOperations.getTargets(script, "entryPoints", true))) {
      SNode typeOfParseMethod = SLinkOperations.getTarget(Sequence.fromIterable(Classifier_Behavior.call_methods_5292274854859311639(SLinkOperations.getTarget(entryPoint, "parser", false))).findLast(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SPropertyOperations.getString(it, "name").equals("parse");
        }
      }), "returnType", true);
      SNode typeOfImplementationMethod = SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(entryPoint, "implementation", true), "parameter", true)).first(), "type", true);

      {
        SNode _nodeToCheck_1029348928467 = entryPoint;
        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, "entry point method argument type must match declared parser.", "r:d274dffc-d0bf-4ec5-bbf4-c1d30ee1f423(NYoSh.typesystem)", "4370546365689502998", 0, null);
        {
          BaseQuickFixProvider intentionProvider = null;
          intentionProvider = new BaseQuickFixProvider("NYoSh.typesystem.FixEntryPointMethod_QuickFix", false);
          intentionProvider.putArgument("entryPoint", entryPoint);
          intentionProvider.putArgument("script", script);
          _info_12389875345.addIntentionProvider(intentionProvider);
        }
        typeCheckingContext.createEquation((SNode) typeOfParseMethod, (SNode) typeOfImplementationMethod, _info_12389875345);
      }



    }
  }

  public String getApplicableConceptFQName() {
    return "NYoSh.structure.Script";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getConceptId(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
