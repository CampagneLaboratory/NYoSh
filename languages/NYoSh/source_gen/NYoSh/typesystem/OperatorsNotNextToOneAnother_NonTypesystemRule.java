package NYoSh.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.smodel.SModelUtil_new;

public class OperatorsNotNextToOneAnother_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public OperatorsNotNextToOneAnother_NonTypesystemRule() {
  }

  public void applyRule(final SNode binOp, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    List<SNode> immediateNeighbors = new ArrayList<SNode>();

    ListSequence.fromList(immediateNeighbors).addElement(SNodeOperations.getPrevSibling(binOp));
    ListSequence.fromList(immediateNeighbors).addElement(SNodeOperations.getNextSibling(binOp));
    if (ListSequence.fromList(immediateNeighbors).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "NYoSh.structure.BinaryCommandOperator");
      }
    })) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(binOp, "two operators cannot be next to one another", "r:d274dffc-d0bf-4ec5-bbf4-c1d30ee1f423(NYoSh.typesystem)", "6839116863304418614", null, errorTarget);
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "NYoSh.structure.BinaryCommandOperator";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getConceptId(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
