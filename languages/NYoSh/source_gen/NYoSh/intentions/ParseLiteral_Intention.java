package NYoSh.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import org.campagnelab.nyosh.gstring.patterns.PatternMatcher;
import java.util.List;
import org.campagnelab.nyosh.gstring.patterns.Component;
import java.util.ArrayList;
import java.util.Arrays;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import org.apache.log4j.Priority;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.intentions.IntentionDescriptor;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;

public class ParseLiteral_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public ParseLiteral_Intention() {
  }

  public String getConcept() {
    return "NYoSh.structure.ExecuteCommand";
  }

  public String getPresentation() {
    return "ParseLiteral";
  }

  public String getPersistentStateKey() {
    return "NYoSh.intentions.ParseLiteral_Intention";
  }

  public String getLanguageFqName() {
    return "NYoSh";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    //  Check that the execute command has one and only one GString literal 
    boolean applicable;
    applicable = (int) ListSequence.fromList(SLinkOperations.getTargets(node, "commands", true)).count() == 1 && SNodeOperations.isInstanceOf(ListSequence.fromList(SLinkOperations.getTargets(node, "commands", true)).first(), "NYoSh.structure.GStringCommand");
    if (!(applicable)) {
      return false;
    }
    SNode c = SNodeOperations.cast(ListSequence.fromList(SLinkOperations.getTargets(node, "commands", true)).first(), "NYoSh.structure.GStringCommand");
    return (int) ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(c, "command", true), "components", true)).count() == 1 && SNodeOperations.isInstanceOf(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(c, "command", true), "components", true)).first(), "org.campagnelab.nyosh.gstring.structure.GStringLiteral");
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:3fd8f008-20f7-41de-ac4a-40f2d89b8fb2(NYoSh.intentions)", "4903231125779396114");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new ParseLiteral_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Parse literal into command expressions";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      SNode c = SNodeOperations.cast(ListSequence.fromList(SLinkOperations.getTargets(node, "commands", true)).first(), "NYoSh.structure.GStringCommand");

      String literalValue = BehaviorReflection.invokeVirtual(String.class, ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(c, "command", true), "components", true)).first(), "virtual_literal_4087517305356282226", new Object[]{});
      if (literalValue.startsWith("\"") && literalValue.endsWith("\"")) {
        literalValue = literalValue.substring(1, literalValue.length() - 1);
      }
      if (LOG.isInfoEnabled()) {
        LOG.info("literal:" + literalValue);
      }
      String[] operators = {";", "&&", "||", "|&", "|"};
      PatternMatcher matcher = PatternMatcher.matchOperators(operators);
      List<Component> components = matcher.split(literalValue);
      List<SNode> commands = new ArrayList<SNode>();
      for (Component component : ListSequence.fromList(components)) {
        if (LOG.isInfoEnabled()) {
          LOG.info("component:" + component);
        }
        if (component.isPattern()) {
          SNode binaryOperator;
          int index = Arrays.asList(operators).indexOf(component.getPayLoad());
          switch (index) {
            case 0:
              binaryOperator = SConceptOperations.createNewNode("NYoSh.structure.SemiColonCommandOperator", null);
              break;
            case 1:
              binaryOperator = SConceptOperations.createNewNode("NYoSh.structure.AndCommandOperator", null);
              break;
            case 2:
              binaryOperator = SConceptOperations.createNewNode("NYoSh.structure.OrCommandOperator", null);
              break;
            case 3:
              binaryOperator = SConceptOperations.createNewNode("NYoSh.structure.PipeOutErrCommandOperator", null);
              break;
            case 4:
              binaryOperator = SConceptOperations.createNewNode("NYoSh.structure.PipeOutCommandOperator", null);
              break;
            default:
              if (LOG.isEnabledFor(Priority.ERROR)) {
                LOG.error("Type of operator is not supported: " + component.getPayLoad());
              }
              continue;
          }
          ListSequence.fromList(commands).addElement(binaryOperator);
        } else {
          SNode gstringCommand = _quotation_createNode_m4ussu_a0a0a1a9a0();

          SPropertyOperations.set((SNodeOperations.cast(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(gstringCommand, "command", true), "components", true)).first(), "org.campagnelab.nyosh.gstring.structure.GStringLiteral")), "value", component.getPayLoad());

          if (LOG.isInfoEnabled()) {
            LOG.info("adding command: " + component.getPayLoad());
          }
          ListSequence.fromList(commands).addElement(gstringCommand);
        }
        SNodeOperations.deleteNode(ListSequence.fromList(SNodeOperations.getDescendants(node, "NYoSh.structure.GStringCommand", false, new String[]{})).first());
        ListSequence.fromList(SLinkOperations.getTargets(node, "commands", true)).addSequence(ListSequence.fromList(commands));


      }
    }

    public IntentionDescriptor getDescriptor() {
      return ParseLiteral_Intention.this;
    }
  }

  protected static Logger LOG = LogManager.getLogger(ParseLiteral_Intention.class);

  private static SNode _quotation_createNode_m4ussu_a0a0a1a9a0() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("NYoSh.structure.GStringCommand", null, null, GlobalScope.getInstance(), false);
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("org.campagnelab.nyosh.gstring.structure.GString", null, null, GlobalScope.getInstance(), false);
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("org.campagnelab.nyosh.gstring.structure.GStringLiteral", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_3, "value", "value");
    quotedNode_2.addChild("components", quotedNode_3);
    quotedNode_1.addChild("command", quotedNode_2);
    return quotedNode_1;
  }
}
