package org.campagnelab.textoutput.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class LineActionMap {
  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setAction(CellActionType.INSERT_BEFORE, new LineActionMap.LineActionMap_INSERT_BEFORE(node));
    editorCell.setAction(CellActionType.INSERT, new LineActionMap.LineActionMap_INSERT(node));
    editorCell.setAction(CellActionType.BACKSPACE, new LineActionMap.LineActionMap_BACKSPACE(node));
    editorCell.setAction(CellActionType.DELETE, new LineActionMap.LineActionMap_DELETE(node));
  }
  public static class LineActionMap_INSERT_BEFORE extends AbstractCellAction {
    /*package*/ SNode myNode;
    public LineActionMap_INSERT_BEFORE(SNode node) {
      this.myNode = node;
    }
    public String getDescriptionText() {
      return "Insert line before line";
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
      SNodeOperations.insertPrevSiblingChild(node, SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x901f5cf3dc774c1eL, 0xbc5a6382baee28b4L, 0x4c3d6fa21cc1a06dL, "org.campagnelab.textoutput.structure.Line")), null));
    }
  }
  public static class LineActionMap_INSERT extends AbstractCellAction {
    /*package*/ SNode myNode;
    public LineActionMap_INSERT(SNode node) {
      this.myNode = node;
    }
    public String getDescriptionText() {
      return "Insert";
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
      SNodeOperations.insertNextSiblingChild(node, SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x901f5cf3dc774c1eL, 0xbc5a6382baee28b4L, 0x4c3d6fa21cc1a06dL, "org.campagnelab.textoutput.structure.Line")), null));
    }
  }
  public static class LineActionMap_BACKSPACE extends AbstractCellAction {
    /*package*/ SNode myNode;
    public LineActionMap_BACKSPACE(SNode node) {
      this.myNode = node;
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
      if (BehaviorReflection.invokeVirtual(Integer.TYPE, node, "virtual_length_3708063525196288017", new Object[]{}) == 0) {
        SNode previousLine = SNodeOperations.getPrevSibling(node);
        SNodeOperations.deleteNode(node);
        if (previousLine != null) {
          editorContext.select(previousLine);
        }
      } else {
        SNode lastPhrase = ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x901f5cf3dc774c1eL, 0xbc5a6382baee28b4L, 0x4c3d6fa21cc1a06dL, 0x17510af4f25c4745L, "phrases"))).last();
        String originalText = SPropertyOperations.getString(lastPhrase, MetaAdapterFactory.getProperty(0x901f5cf3dc774c1eL, 0xbc5a6382baee28b4L, 0x17510af4f25c474eL, 0x17510af4f25c474fL, "text"));
        SPropertyOperations.set(lastPhrase, MetaAdapterFactory.getProperty(0x901f5cf3dc774c1eL, 0xbc5a6382baee28b4L, 0x17510af4f25c474eL, 0x17510af4f25c474fL, "text"), SPropertyOperations.getString(lastPhrase, MetaAdapterFactory.getProperty(0x901f5cf3dc774c1eL, 0xbc5a6382baee28b4L, 0x17510af4f25c474eL, 0x17510af4f25c474fL, "text")).substring(0, originalText.length() - 1));
      }
    }
  }
  public static class LineActionMap_DELETE extends AbstractCellAction {
    /*package*/ SNode myNode;
    public LineActionMap_DELETE(SNode node) {
      this.myNode = node;
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
      // prevent deleting a line 
    }
  }
}
