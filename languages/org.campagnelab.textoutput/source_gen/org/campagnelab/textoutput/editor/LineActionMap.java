package org.campagnelab.textoutput.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class LineActionMap {
  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setAction(CellActionType.INSERT_BEFORE, new LineActionMap.LineActionMap_INSERT_BEFORE(node));
    editorCell.setAction(CellActionType.INSERT, new LineActionMap.LineActionMap_INSERT(node));
    editorCell.setAction(CellActionType.DELETE, new LineActionMap.LineActionMap_DELETE(node));
    editorCell.setAction(CellActionType.BACKSPACE, new LineActionMap.LineActionMap_BACKSPACE(node));
  }

  public static class LineActionMap_INSERT_BEFORE extends AbstractCellAction {
    /*package*/ SNode myNode;

    public LineActionMap_INSERT_BEFORE(SNode node) {
      this.myNode = node;
    }

    public String getDescriptionText() {
      return "Insert line before line";
    }

    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }

    public void execute_internal(EditorContext editorContext, SNode node) {
      SNodeOperations.insertPrevSiblingChild(node, SConceptOperations.createNewNode("org.campagnelab.textoutput.structure.Line", null));
    }
  }

  public static class LineActionMap_INSERT extends AbstractCellAction {
    /*package*/ SNode myNode;

    public LineActionMap_INSERT(SNode node) {
      this.myNode = node;
    }

    public String getDescriptionText() {
      return "Insert";
    }

    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }

    public void execute_internal(EditorContext editorContext, SNode node) {
      SNodeOperations.insertNextSiblingChild(node, SConceptOperations.createNewNode("org.campagnelab.textoutput.structure.Line", null));


    }
  }

  public static class LineActionMap_DELETE extends AbstractCellAction {
    /*package*/ SNode myNode;

    public LineActionMap_DELETE(SNode node) {
      this.myNode = node;
    }

    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }

    public void execute_internal(EditorContext editorContext, SNode node) {
      SPropertyOperations.set(node, "text", "delete pressed");
    }
  }

  public static class LineActionMap_BACKSPACE extends AbstractCellAction {
    /*package*/ SNode myNode;

    public LineActionMap_BACKSPACE(SNode node) {
      this.myNode = node;
    }

    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }

    public void execute_internal(EditorContext editorContext, SNode node) {
      SPropertyOperations.set(node, "text", "delete pressed");
    }
  }
}
