package org.campagnelab.textoutput.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.intentions.IntentionDescriptor;

public class ParseNewLines_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public ParseNewLines_Intention() {
  }

  public String getConcept() {
    return "org.campagnelab.textoutput.structure.Line";
  }

  public String getPresentation() {
    return "ParseNewLines";
  }

  public String getPersistentStateKey() {
    return "org.campagnelab.textoutput.intentions.ParseNewLines_Intention";
  }

  public String getLanguageFqName() {
    return "org.campagnelab.textoutput";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:55d3455f-42cc-4fb7-8ffb-91281ea900e9(org.campagnelab.textoutput.intentions)", "8245000766498756105");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new ParseNewLines_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Split Line at New Line Character";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      String text = SPropertyOperations.getString(node, "text");
      if (text.contains("\\n")) {
        String[] subLines = text.split("\\\\n");
        SNode lines = SConceptOperations.createNewNode("org.campagnelab.textoutput.structure.Lines", null);
        for (String subline : subLines) {
          SNode newLine = SConceptOperations.createNewNode("org.campagnelab.textoutput.structure.Line", null);
          SPropertyOperations.set(newLine, "text", subline);
          ListSequence.fromList(SLinkOperations.getTargets(lines, "lines", true)).addElement(newLine);
        }
        SPropertyOperations.set(node, "text", "");
        SNodeOperations.insertPrevSiblingChild(node, lines);
      }
    }

    public IntentionDescriptor getDescriptor() {
      return ParseNewLines_Intention.this;
    }
  }
}
