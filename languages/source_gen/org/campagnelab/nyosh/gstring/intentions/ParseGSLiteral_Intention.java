package org.campagnelab.nyosh.gstring.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import org.campagnelab.nyosh.gstring.patterns.PatternMatcher;
import java.util.List;
import org.campagnelab.nyosh.gstring.patterns.Component;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.intentions.IntentionDescriptor;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;

public class ParseGSLiteral_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public ParseGSLiteral_Intention() {
  }

  public String getConcept() {
    return "org.campagnelab.nyosh.gstring.structure.GStringLiteral";
  }

  public String getPresentation() {
    return "ParseGSLiteral";
  }

  public String getPersistentStateKey() {
    return "org.campagnelab.nyosh.gstring.intentions.ParseGSLiteral_Intention";
  }

  public String getLanguageFqName() {
    return "org.campagnelab.nyosh.gstring";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return true;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:db5ee15a-4319-47c6-80c9-0e7eb1a4ee52(org.campagnelab.nyosh.gstring.intentions)", "2873442313547967547");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new ParseGSLiteral_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Extract ${var} as variables";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      PatternMatcher matcher = new PatternMatcher();
      List<Component> components = matcher.split(SPropertyOperations.getString(node, "value"));
      List<SNode> list = new ArrayList<SNode>();
      for (Component component : ListSequence.fromList(components)) {
        if (component.isPattern()) {
          SNode varRef = SConceptOperations.createNewNode("org.campagnelab.nyosh.gstring.structure.GStringVarReference", null);
          SNode statement = _quotation_createNode_v70eig_a0b0a0d0a(component.getPayLoad());
          // Add declaration before the node that holds the gstring:     
          SNodeOperations.insertPrevSiblingChild(SNodeOperations.getParent(SNodeOperations.getParent(SNodeOperations.getParent(node))), statement);
          SLinkOperations.setTarget(varRef, "varRef", ListSequence.fromList(SNodeOperations.getDescendants(statement, "jetbrains.mps.baseLanguage.structure.VariableDeclaration", false, new String[]{})).first(), false);
          list.add(varRef);
        } else {
          SNode literal = SConceptOperations.createNewNode("org.campagnelab.nyosh.gstring.structure.GStringLiteral", null);
          SPropertyOperations.set(literal, "value", component.getPayLoad());
          list.add(literal);
          if (LOG.isInfoEnabled()) {
            LOG.info("Add literal:" + literal);
          }
        }
      }
      SNode gstring = SNodeOperations.getAncestor(node, "org.campagnelab.nyosh.gstring.structure.GString", false, false);
      SNodeOperations.deleteNode(node);
      ListSequence.fromList(SLinkOperations.getTargets(gstring, "components", true)).addSequence(ListSequence.fromList(list));

    }

    public IntentionDescriptor getDescriptor() {
      return ParseGSLiteral_Intention.this;
    }
  }

  protected static Logger LOG = LogManager.getLogger(ParseGSLiteral_Intention.class);

  private static SNode _quotation_createNode_v70eig_a0b0a0d0a(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement", null, null, GlobalScope.getInstance(), false);
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_3, "name", (String) parameter_1);
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StringLiteral", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_4, "value", "");
    quotedNode_3.addChild("initializer", quotedNode_4);
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StringType", null, null, GlobalScope.getInstance(), false);
    quotedNode_3.addChild("type", quotedNode_5);
    quotedNode_2.addChild("localVariableDeclaration", quotedNode_3);
    return quotedNode_2;
  }
}
