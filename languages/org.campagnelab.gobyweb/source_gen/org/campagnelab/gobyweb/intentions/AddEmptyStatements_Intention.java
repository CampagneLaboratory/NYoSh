package org.campagnelab.gobyweb.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.intentions.IntentionDescriptor;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;

public class AddEmptyStatements_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public AddEmptyStatements_Intention() {
  }

  public String getConcept() {
    return "org.campagnelab.NYoSh.structure.EntryPoint";
  }

  public String getPresentation() {
    return "AddEmptyStatements";
  }

  public String getPersistentStateKey() {
    return "org.campagnelab.gobyweb.intentions.AddEmptyStatements_Intention";
  }

  public String getLanguageFqName() {
    return "org.campagnelab.gobyweb";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:c13e4aa8-3534-477b-bcd1-e8b38e45f88a(org.campagnelab.gobyweb.intentions)", "7518874264105071085");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new AddEmptyStatements_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Add Empty Statements (GobyWeb)";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      SLinkOperations.setTarget(SNodeOperations.cast(SLinkOperations.getTarget(node, "prototype", true), "jetbrains.mps.baseLanguage.structure.BlockStatement"), "statements", _quotation_createNode_jeilk8_a0a0a(), true);

    }

    public IntentionDescriptor getDescriptor() {
      return AddEmptyStatements_Intention.this;
    }
  }

  private static SNode _quotation_createNode_jeilk8_a0a0a() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", null, null, false);
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.SingleLineComment", null, null, false);
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.TextCommentPart", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_3, "text", "empty for now, will be replaced at generation");
    quotedNode_2.addChild("commentPart", quotedNode_3);
    quotedNode_1.addChild("statement", quotedNode_2);
    return quotedNode_1;
  }
}
