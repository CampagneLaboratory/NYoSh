package org.campagnelab.gobyweb.plugin;

/*Generated by MPS */

import jetbrains.mps.make.facet.IFacet;
import java.util.List;
import jetbrains.mps.make.facet.ITarget;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.make.resources.IPropertiesPersistence;
import jetbrains.mps.make.facet.ITargetEx2;
import jetbrains.mps.make.script.IJob;
import jetbrains.mps.make.script.IResult;
import jetbrains.mps.make.resources.IResource;
import jetbrains.mps.make.script.IJobMonitor;
import jetbrains.mps.make.resources.IPropertiesAccessor;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import jetbrains.mps.smodel.resources.TResource;
import java.util.Set;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.project.SModuleOperations;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import org.jetbrains.mps.openapi.module.SModuleFacet;
import jetbrains.mps.project.facets.JavaModuleFacet;
import jetbrains.mps.util.SNodeOperations;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.campagnelab.gobyweb.behavior.PluginSystemRootDirectory_Behavior;
import java.io.File;
import org.apache.log4j.Level;
import jetbrains.mps.make.script.IFeedback;
import jetbrains.mps.util.FileUtil;
import java.io.IOException;
import jetbrains.mps.make.script.IConfig;
import jetbrains.mps.make.script.IPropertiesPool;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class CopyClassesToPlugin_Facet extends IFacet.Stub {
  private List<ITarget> targets = ListSequence.fromList(new ArrayList<ITarget>());
  private IFacet.Name name = new IFacet.Name("org.campagnelab.gobyweb.CopyClassesToPlugin");

  public CopyClassesToPlugin_Facet() {
    ListSequence.fromList(targets).addElement(new CopyClassesToPlugin_Facet.Target_CopyClassesToPlugin());
  }

  public Iterable<ITarget> targets() {
    return targets;
  }

  public Iterable<IFacet.Name> optional() {
    return null;
  }

  public Iterable<IFacet.Name> required() {
    return Sequence.fromArray(new IFacet.Name[]{new IFacet.Name("jetbrains.mps.make.facets.JavaCompile"), new IFacet.Name("jetbrains.mps.make.facets.Make"), new IFacet.Name("jetbrains.mps.lang.core.TextGen"), new IFacet.Name("jetbrains.mps.lang.traceable.CopyTraceInfo")});
  }

  public Iterable<IFacet.Name> extended() {
    return null;
  }

  public IFacet.Name getName() {
    return this.name;
  }

  public IPropertiesPersistence propertiesPersistence() {
    return new CopyClassesToPlugin_Facet.TargetProperties();
  }

  public static class Target_CopyClassesToPlugin implements ITargetEx2 {
    private static final ITarget.Name name = new ITarget.Name("org.campagnelab.gobyweb.CopyClassesToPlugin.CopyClassesToPlugin");

    public Target_CopyClassesToPlugin() {
    }

    public IJob createJob() {
      return new IJob.Stub() {
        @Override
        public IResult execute(final Iterable<IResource> rawInput, final IJobMonitor monitor, final IPropertiesAccessor pa, @NotNull final ProgressMonitor progressMonitor) {
          Iterable<IResource> _output_1puym7_a0a = null;
          final Iterable<TResource> input = (Iterable<TResource>) (Iterable) rawInput;
          switch (0) {
            case 0:
              _output_1puym7_a0a = Sequence.fromIterable(_output_1puym7_a0a).concat(Sequence.fromIterable(Sequence.<IResource>singleton(new SomeTuple(null, null))));
              Set<SModule> compiled = SetSequence.fromSetWithValues(new HashSet<SModule>(), Sequence.fromIterable(input).select(new ISelector<TResource, SModule>() {
                public SModule select(TResource it) {
                  return it.module();
                }
              }).where(new IWhereFilter<SModule>() {
                public boolean accept(SModule it) {
                  return SModuleOperations.isCompileInMps(it);
                }
              }).distinct());
              for (SModule module : compiled) {
                for (SModel model : module.getModels()) {
                  if (LOG.isInfoEnabled()) {
                    LOG.info("model:" + model.getSource().getLocation());
                  }
                }
                if (LOG.isInfoEnabled()) {
                  LOG.info("module:" + module.getModels());
                }
              }
              progressMonitor.start("Copying resources", 2);
              progressMonitor.step("copying to gobyweb destination");

              final List<IFile> toCreate = ListSequence.fromList(new ArrayList<IFile>());
              final List<Tuples._2<IFile, IFile>> toCopy = ListSequence.fromList(new ArrayList<Tuples._2<IFile, IFile>>());

              for (final TResource tres : Sequence.fromIterable(input)) {
                if (LOG.isInfoEnabled()) {
                  LOG.info("tres.module:" + tres.module());
                }
                if (LOG.isInfoEnabled()) {
                  LOG.info("tres.modelDescriptor:" + tres.modelDescriptor());
                }
                for (SModuleFacet facet : tres.module().getFacets()) {
                  System.out.println("facet:" + facet.toString());
                }
                JavaModuleFacet facet = tres.module().getFacet(JavaModuleFacet.class);
                if (facet == null) {
                  // not java module 
                  // todo: do something?! 
                  if (LOG.isInfoEnabled()) {
                    LOG.info("Not java module");
                  }
                  continue;
                }
                if (!(facet.isCompileInMps())) {
                  // idea copies trace.info files 
                  if (LOG.isInfoEnabled()) {
                    LOG.info("not compile in mps");
                  }
                  continue;
                }

                final IFile classesGenDirectory = facet.getClassesGen();
                final IFile directoryWithClasses = facet.getClassesGen().getDescendant(SNodeOperations.getModelLongName(tres.modelDescriptor()).replace(".", "/"));
                if (!(directoryWithClasses.exists())) {
                  // <node> 
                  if (LOG.isInfoEnabled()) {
                    LOG.info("Will create directory:" + directoryWithClasses);
                  }
                }
                final Wrappers._T<String> destinationPath = new Wrappers._T<String>();
                //  access the models to collect destination paths from the GobyWebPluginTree annotation: 
                ModelAccess.instance().runReadAction(new Runnable() {
                  public void run() {
                    for (SNode rootNode : tres.modelDescriptor().getRootNodes()) {
                      if (LOG.isInfoEnabled()) {
                        LOG.info("conceptName: " + rootNode.getConcept().getName());
                      }
                      {
                        SNode script = rootNode;
                        if (jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.isInstanceOf(script, "org.campagnelab.gobyweb.structure.PluginScript")) {
                          SNode pluginScript = jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.cast(rootNode, "org.campagnelab.gobyweb.structure.PluginScript");
                          if (isNotEmptyString(SPropertyOperations.getString(SLinkOperations.getTarget(pluginScript, "pluginSystem", true), "path"))) {
                            destinationPath.value = PluginSystemRootDirectory_Behavior.call_getPath_8272164243038473394(SLinkOperations.getTarget(pluginScript, "pluginSystem", true)) + "/plugins/" + SPropertyOperations.getString_def(pluginScript, "pluginKind", "aligners") + "/" + SPropertyOperations.getString(pluginScript, "pluginId");
                          } else {
                            if (LOG.isInfoEnabled()) {
                              LOG.info("Cannot copy, destination not specified for " + rootNode);
                            }
                          }
                        }
                      }
                    }
                  }
                });
                if (isNotEmptyString(destinationPath.value)) {
                  File pluginRootDir = new File(destinationPath.value);
                  if (!(pluginRootDir.exists())) {
                    if (LOG.isEnabledFor(Level.FATAL)) {
                      LOG.fatal("Cannot copy MPS classes to GobyWeb plugin tree. Destination path must exist: " + destinationPath.value);
                    }
                  }
                  if (LOG.isInfoEnabled()) {
                    LOG.info("Plugin root: " + destinationPath.value);
                  }
                  File sourceDir = new File(directoryWithClasses.getPath());
                  // <node> 
                  if (LOG.isInfoEnabled()) {
                    LOG.info("Source dir: " + sourceDir.getAbsolutePath());
                  }
                  // <node> 
                  if (LOG.isInfoEnabled()) {
                    LOG.info("Creating target dir");
                  }
                  for (File file : sourceDir.listFiles()) {
                    if (file.getName().endsWith(".sh")) {
                      monitor.reportFeedback(new IFeedback.INFORMATION(String.valueOf("Copying file " + file.getPath() + " to " + pluginRootDir)));
                      FileUtil.copyFile(file, pluginRootDir);
                    }
                  }
                  try {
                    File pluginJar = PluginUtils.createDistributionPackage(sourceDir);
                    monitor.reportFeedback(new IFeedback.INFORMATION(String.valueOf("Copying file " + pluginJar.getAbsolutePath() + " to " + pluginRootDir.getAbsolutePath())));
                    FileUtil.copyFile(pluginJar, new File(pluginRootDir, pluginJar.getName()));
                  } catch (IOException ioe) {
                    monitor.reportFeedback(new IFeedback.ERROR(String.valueOf("Cannot create the plugin distro package" + ioe.getMessage())));
                    if (LOG.isEnabledFor(Level.FATAL)) {
                      LOG.fatal("Cannot create plugin distribition package", ioe);
                    }
                  }
                }

                _output_1puym7_a0a = Sequence.fromIterable(_output_1puym7_a0a).concat(Sequence.fromIterable(Sequence.<IResource>singleton(tres)));
              }

              monitor.reportFeedback(new IFeedback.INFORMATION(String.valueOf("Finished copying classes to plugin system root directory")));
              return new IResult.SUCCESS(_output_1puym7_a0a);

            default:
              return new IResult.SUCCESS(_output_1puym7_a0a);
          }
        }
      };
    }

    public IConfig createConfig() {
      return null;
    }

    public Iterable<ITarget.Name> notAfter() {
      return null;
    }

    public Iterable<ITarget.Name> after() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.make.facets.JavaCompile.compile")});
    }

    public Iterable<ITarget.Name> notBefore() {
      return null;
    }

    public Iterable<ITarget.Name> before() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.make.facets.Make.reconcile")});
    }

    public ITarget.Name getName() {
      return name;
    }

    public boolean isOptional() {
      return false;
    }

    public boolean requiresInput() {
      return true;
    }

    public boolean producesOutput() {
      return false;
    }

    public Iterable<Class<? extends IResource>> expectedInput() {
      List<Class<? extends IResource>> rv = ListSequence.fromList(new ArrayList<Class<? extends IResource>>());
      ListSequence.fromList(rv).addElement(TResource.class);
      return rv;
    }

    public Iterable<Class<? extends IResource>> expectedOutput() {
      return null;
    }

    public <T> T createParameters(Class<T> cls) {
      return cls.cast(new Parameters());
    }

    public <T> T createParameters(Class<T> cls, T copyFrom) {
      T t = createParameters(cls);
      if (t != null) {
        ((Tuples._1) t).assign((Tuples._1) copyFrom);
      }
      return t;
    }

    public int workEstimate() {
      return 400;
    }

    public static CopyClassesToPlugin_Facet.Target_CopyClassesToPlugin.Parameters vars(IPropertiesPool ppool) {
      return ppool.properties(name, CopyClassesToPlugin_Facet.Target_CopyClassesToPlugin.Parameters.class);
    }

    public static class Parameters extends MultiTuple._1<IFile> {
      public Parameters() {
        super();
      }

      public Parameters(IFile gobywebPluginRoot) {
        super(gobywebPluginRoot);
      }

      public IFile gobywebPluginRoot(IFile value) {
        return super._0(value);
      }

      public IFile gobywebPluginRoot() {
        return super._0();
      }

      @SuppressWarnings(value = "unchecked")
      public CopyClassesToPlugin_Facet.Target_CopyClassesToPlugin.Parameters assignFrom(Tuples._1<IFile> from) {
        return (CopyClassesToPlugin_Facet.Target_CopyClassesToPlugin.Parameters) super.assign(from);
      }
    }

    private static boolean isNotEmptyString(String str) {
      return str != null && str.length() > 0;
    }
  }

  public static class TargetProperties implements IPropertiesPersistence {
    public TargetProperties() {
    }

    public void storeValues(Map<String, String> store, IPropertiesPool properties) {
      {
        ITarget.Name name = new ITarget.Name("org.campagnelab.gobyweb.CopyClassesToPlugin.CopyClassesToPlugin");
        if (properties.hasProperties(name)) {
          CopyClassesToPlugin_Facet.Target_CopyClassesToPlugin.Parameters props = properties.properties(name, CopyClassesToPlugin_Facet.Target_CopyClassesToPlugin.Parameters.class);
          MapSequence.fromMap(store).put("org.campagnelab.gobyweb.CopyClassesToPlugin.CopyClassesToPlugin.gobywebPluginRoot", null);
        }
      }
    }

    public void loadValues(Map<String, String> store, IPropertiesPool properties) {
      try {
        {
          ITarget.Name name = new ITarget.Name("org.campagnelab.gobyweb.CopyClassesToPlugin.CopyClassesToPlugin");
          CopyClassesToPlugin_Facet.Target_CopyClassesToPlugin.Parameters props = properties.properties(name, CopyClassesToPlugin_Facet.Target_CopyClassesToPlugin.Parameters.class);
          if (MapSequence.fromMap(store).containsKey("org.campagnelab.gobyweb.CopyClassesToPlugin.CopyClassesToPlugin.gobywebPluginRoot")) {
            props.gobywebPluginRoot(null);
          }
        }
      } catch (RuntimeException re) {
      }
    }
  }

  protected static Logger LOG = LogManager.getLogger(CopyClassesToPlugin_Facet.class);
}
