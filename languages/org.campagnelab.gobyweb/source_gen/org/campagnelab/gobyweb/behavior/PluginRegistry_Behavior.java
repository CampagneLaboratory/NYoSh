package org.campagnelab.gobyweb.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.campagnelab.gobyweb.plugins.PluginRegistry;
import org.campagnelab.nyosh.environment.NYoShConfigurationEnvironment;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.campagnelab.gobyweb.plugins.xml.executables.ExecutableConfig;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.campagnelab.gobyweb.plugins.xml.executables.Slot;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import org.campagnelab.gobyweb.plugins.xml.filesets.FileSetConfig;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class PluginRegistry_Behavior {
  public static void init(SNode thisNode) {

  }

  public static List<SNode> call_getInputSlots_6519147379572947977(SNode thisNode) {
    List<SNode> slots = new ArrayList<SNode>();
    SNode script = SNodeOperations.getAncestor(thisNode, "org.campagnelab.gobyweb.structure.PluginScript", false, false);
    try {
      PluginRegistry registry = NYoShConfigurationEnvironment.getRegistry(PluginSystemRootDirectory_Behavior.call_getPath_8272164243038473394(SLinkOperations.getTarget(script, "pluginSystem", true)));
      ExecutableConfig config = registry.findByTypedId(SPropertyOperations.getString(script, "pluginId"), ExecutableConfig.class);
      for (Slot configuredSlot : ListSequence.fromList(config.getInput().getInputSlots())) {
        SNode slot = SConceptOperations.createNewNode("org.campagnelab.gobyweb.plugins.structure.PluginInputSlot", null);
        SPropertyOperations.set(slot, "name", configuredSlot.getName());
        SLinkOperations.setTarget(slot, "instanceOf", SConceptOperations.createNewNode("org.campagnelab.gobyweb.structure.PluginReference", null), true);
        SPropertyOperations.set(SLinkOperations.getTarget(slot, "instanceOf", true), "pluginID", configuredSlot.geType().id);
        SPropertyOperations.set(SLinkOperations.getTarget(slot, "instanceOf", true), "pluginDescription", registry.findByTypedId(SPropertyOperations.getString(SLinkOperations.getTarget(slot, "instanceOf", true), "pluginID"), FileSetConfig.class).getHelp());
        ListSequence.fromList(slots).addElement(slot);
      }
    } catch (Exception e) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("Unable to get the Plugin Registry, can't read the plugin configuration", e);
      }
    }
    return slots;
  }

  public static List<SNode> call_getOutputSlots_6519147379572948090(SNode thisNode) {
    List<SNode> slots = new ArrayList<SNode>();
    SNode script = SNodeOperations.getAncestor(thisNode, "org.campagnelab.gobyweb.structure.PluginScript", false, false);
    try {
      PluginRegistry registry = NYoShConfigurationEnvironment.getRegistry(PluginSystemRootDirectory_Behavior.call_getPath_8272164243038473394(SLinkOperations.getTarget(script, "pluginSystem", true)));
      ExecutableConfig config = registry.findByTypedId(SPropertyOperations.getString(script, "pluginId"), ExecutableConfig.class);
      for (Slot configuredSlot : ListSequence.fromList(config.getOutput().getOutputSlots())) {
        SNode slot = SConceptOperations.createNewNode("org.campagnelab.gobyweb.plugins.structure.PluginOutputSlot", null);
        SPropertyOperations.set(slot, "name", configuredSlot.getName());
        SLinkOperations.setTarget(slot, "instanceOf", SConceptOperations.createNewNode("org.campagnelab.gobyweb.structure.PluginReference", null), true);
        SPropertyOperations.set(SLinkOperations.getTarget(slot, "instanceOf", true), "pluginID", configuredSlot.geType().id);
        SPropertyOperations.set(SLinkOperations.getTarget(slot, "instanceOf", true), "pluginDescription", registry.findByTypedId(SPropertyOperations.getString(SLinkOperations.getTarget(slot, "instanceOf", true), "pluginID"), FileSetConfig.class).getHelp());
        ListSequence.fromList(slots).addElement(slot);
      }
    } catch (Exception e) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("Unable to get the Plugin Registry, can't read the plugin configuration", e);
      }
    }
    return slots;
  }

  protected static Logger LOG = LogManager.getLogger(PluginRegistry_Behavior.class);
}
