package AlignmentAnalysisPlugin;

/*Generated by MPS */

import java.util.Set;
import java.util.HashSet;
import org.campagnelab.nyosh.logging.Log4JInitializer;
import org.campagnelab.nyosh.environment.parsers.Parser;
import org.campagnelab.nyosh.environment.parsers.JVMEnvParser;
import java.util.SortedSet;
import org.campagnelab.nyosh.environment.parsers.ScriptVariable;
import org.campagnelab.nyosh.environment.parsers.GobyWebParser;
import java.util.Arrays;
import org.campagnelab.stepslogger.FileStepsLogger;
import java.io.File;
import java.io.IOException;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class AlignmentAnalysisScript {
  private static Set<String> exportedVariables = new HashSet<String>();


  public static void main(String[] arguments) {
    if (arguments.length == 0) {
      arguments = new String[]{"main"};
    }
    Log4JInitializer.init();
    // BEFORE_ENTRY_POINT_EXECUTION 

    if ("plugin_alignment_analysis_split".equals(arguments[0])) {

      if (arguments.length == 3) {
        process(arguments[1], Integer.getInteger(arguments[2]));
      } else {
        System.err.println("Invalid number of arguments");
      }
      finish();
      System.exit(0);
    }
    if ("plugin_alignment_analysis_num_parts".equals(arguments[0])) {

      if (arguments.length == 2) {
        numParts(arguments[1]);
      } else {
        System.err.println("Invalid number of arguments");
      }
      finish();
      System.exit(0);
    }
    if ("plugin_alignment_analysis_process".equals(arguments[0])) {

      if (arguments.length == 3) {
        process(arguments[1], Integer.getInteger(arguments[2]));
      } else {
        System.err.println("Invalid number of arguments");
      }
      finish();
      System.exit(0);
    }
    if ("plugin_alignment_analysis_combine".equals(arguments[0])) {

      if (arguments.length > 2) {
        String[] partsResultFiles = new String[arguments.length - 2];
        // trim the first two elements from the arguments 
        System.arraycopy(arguments, 2, partsResultFiles, 0, partsResultFiles.length);
        combine(arguments[1], partsResultFiles);
      } else {
        System.err.println("Invalid number of arguments");
      }
      finish();
      System.exit(0);
    }
    System.err.printf("The entry point %s name was not recognized", arguments[0]);
    finish();
    System.exit(1);
  }

  public static void split(int numOfParts, String splicingPlanResult, String[] parts) {
    {
      initializeStepsLogging();
      System.out.println("Executing step: " + "Catch all step for GobyWeb");
      boolean success_293np1_a0d = false;
      String reason_293np1_a0d = "Catch all step for GobyWeb";
      Exception exception_a0d = null;
      try {
        Parser parser_293np1_a0a0a0a5a0a0a0d = new JVMEnvParser();
        SortedSet<ScriptVariable> variables_293np1_a0a0a0a5a0a0a0d = parser_293np1_a0a0a0a5a0a0a0d.parseAtRunTime();
        Parser parser_293np1_b0a0a0f0a0a0a3 = new GobyWebParser();
        SortedSet<ScriptVariable> variables_293np1_b0a0a0f0a0a0a3 = parser_293np1_b0a0a0f0a0a0a3.parseAtRunTime();

        System.out.println(String.format("Number of parts: %d", numOfParts));
        System.out.println(String.format("Splicing plan result: %s", splicingPlanResult));
        System.out.println(String.format("Parts: %s", Arrays.toString(parts)));


        success_293np1_a0d = true;
      } catch (Exception e) {
        exception_a0d = e;

      } finally {
        if (!(success_293np1_a0d)) {
          errorManagement.exception("step " + reason_293np1_a0d + " failed.", 0, exception_a0d);
        } else {
          errorManagement.recordStepDone(reason_293np1_a0d);
        }

        try {
          // This was the last step, we need to close the stepslogger: 
          _steps.close();

        } catch (Exception e) {
          if (LOG.isInfoEnabled()) {
            LOG.info("An error occured closing stepslogger", e);
          }
        }
      }
    }
    // end of reduce_step 
  }

  public static void numParts(String splicingPlanFile) {
    {
      initializeStepsLogging();
      System.out.println("Executing step: " + "Catch all step for GobyWeb");
      boolean success_293np1_a0e = false;
      String reason_293np1_a0e = "Catch all step for GobyWeb";
      Exception exception_a0e = null;
      try {
        Parser parser_293np1_a0a0a0a5a0a0a0e = new JVMEnvParser();
        SortedSet<ScriptVariable> variables_293np1_a0a0a0a5a0a0a0e = parser_293np1_a0a0a0a5a0a0a0e.parseAtRunTime();
        Parser parser_293np1_b0a0a0f0a0a0a4 = new GobyWebParser();
        SortedSet<ScriptVariable> variables_293np1_b0a0a0f0a0a0a4 = parser_293np1_b0a0a0f0a0a0a4.parseAtRunTime();

        System.out.println(String.format("Splicing plan file %s", splicingPlanFile));

        success_293np1_a0e = true;
      } catch (Exception e) {
        exception_a0e = e;

      } finally {
        if (!(success_293np1_a0e)) {
          errorManagement.exception("step " + reason_293np1_a0e + " failed.", 0, exception_a0e);
        } else {
          errorManagement.recordStepDone(reason_293np1_a0e);
        }

        try {
          // This was the last step, we need to close the stepslogger: 
          _steps.close();

        } catch (Exception e) {
          if (LOG.isInfoEnabled()) {
            LOG.info("An error occured closing stepslogger", e);
          }
        }
      }
    }
    // end of reduce_step 
  }

  public static void process(String slicingPlanFile, int currentPart) {
    {
      initializeStepsLogging();
      System.out.println("Executing step: " + "Catch all step for GobyWeb");
      boolean success_293np1_a0f = false;
      String reason_293np1_a0f = "Catch all step for GobyWeb";
      Exception exception_a0f = null;
      try {
        Parser parser_293np1_a0a0a0a5a0a0a0f = new JVMEnvParser();
        SortedSet<ScriptVariable> variables_293np1_a0a0a0a5a0a0a0f = parser_293np1_a0a0a0a5a0a0a0f.parseAtRunTime();
        Parser parser_293np1_b0a0a0f0a0a0a5 = new GobyWebParser();
        SortedSet<ScriptVariable> variables_293np1_b0a0a0f0a0a0a5 = parser_293np1_b0a0a0f0a0a0a5.parseAtRunTime();

        System.out.println(String.format("Slicing plan file: %s", slicingPlanFile));
        System.out.println(String.format("Current part: %d", currentPart));

        success_293np1_a0f = true;
      } catch (Exception e) {
        exception_a0f = e;

      } finally {
        if (!(success_293np1_a0f)) {
          errorManagement.exception("step " + reason_293np1_a0f + " failed.", 0, exception_a0f);
        } else {
          errorManagement.recordStepDone(reason_293np1_a0f);
        }

        try {
          // This was the last step, we need to close the stepslogger: 
          _steps.close();

        } catch (Exception e) {
          if (LOG.isInfoEnabled()) {
            LOG.info("An error occured closing stepslogger", e);
          }
        }
      }
    }
    // end of reduce_step 
  }

  public static void combine(String resultsFile, String[] part_result_files) {
    {
      initializeStepsLogging();
      System.out.println("Executing step: " + "Catch all step for GobyWeb");
      boolean success_293np1_a0g = false;
      String reason_293np1_a0g = "Catch all step for GobyWeb";
      Exception exception_a0g = null;
      try {
        Parser parser_293np1_a0a0a0a5a0a0a0g = new JVMEnvParser();
        SortedSet<ScriptVariable> variables_293np1_a0a0a0a5a0a0a0g = parser_293np1_a0a0a0a5a0a0a0g.parseAtRunTime();
        Parser parser_293np1_b0a0a0f0a0a0a6 = new GobyWebParser();
        SortedSet<ScriptVariable> variables_293np1_b0a0a0f0a0a0a6 = parser_293np1_b0a0a0f0a0a0a6.parseAtRunTime();

        System.out.println(String.format("Result file: %s", resultsFile));
        System.out.println(String.format("Part result files: %s", Arrays.toString(part_result_files)));

        success_293np1_a0g = true;
      } catch (Exception e) {
        exception_a0g = e;

      } finally {
        if (!(success_293np1_a0g)) {
          errorManagement.exception("step " + reason_293np1_a0g + " failed.", 0, exception_a0g);
        } else {
          errorManagement.recordStepDone(reason_293np1_a0g);
        }

        try {
          // This was the last step, we need to close the stepslogger: 
          _steps.close();

        } catch (Exception e) {
          if (LOG.isInfoEnabled()) {
            LOG.info("An error occured closing stepslogger", e);
          }
        }
      }
    }
    // end of reduce_step 
  }

  public static void finish() {
  }

  private static FileStepsLogger _steps;
// declared flag removed
  public static void initializeStepsLogging() {
    if (AlignmentAnalysisScript._steps == null) {
      AlignmentAnalysisScript._steps = new FileStepsLogger(new File("./"));
    }
  }

  public static void fail(boolean mustBeTrue, String reason) {
    fail(mustBeTrue, reason, 1);
  }

  private static void done(String stepDescription, int statusCode) {
    AlignmentAnalysisScript._steps.step(stepDescription, statusCode);
  }

  /*package*/ static void fail(boolean mustBeTrue, String reason, int statusCode) {
    if (!(mustBeTrue)) {
      AlignmentAnalysisScript._steps.error(reason);
      try {
        AlignmentAnalysisScript._steps.close();
      } catch (IOException e) {
        //  we tried to close stepslogger. Giving up now. 
      }
      System.exit(statusCode);
    }
  }

  private static ErrorManagementImplementation errorManagement = new ErrorManagementImplementation();
  protected static Logger LOG = LogManager.getLogger(AlignmentAnalysisScript.class);
}
